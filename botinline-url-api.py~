import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram import Router
import os
from dotenv import load_dotenv
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp

# Загрузка переменных окружения из файла .env
load_dotenv()

API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')
API_KEY_NEWS = os.getenv('API_KEY_NEWS')

# Проверка, что переменные окружения корректно загружены
if not API_TOKEN or not API_KEY_NEWS:
    raise ValueError("API_TOKEN и API_KEY_NEWS должны быть заданы в файле .env")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

urls = {
    "кнопка 1": "https://www.youtube.com/news",
    "кнопка 2": "https://example.com/link2",
    "кнопка 3": "https://example.com/link3",
    "кнопка 4": "https://example.com/link4"
}

async def test_keyboard():
    keyboard = InlineKeyboardBuilder()
    for key, url in urls.items():
        keyboard.add(InlineKeyboardButton(text=key, callback_data=key))
    return keyboard.adjust(2).as_markup()

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(f'Здарова! {message.from_user.first_name}', reply_markup=await test_keyboard())

@dp.callback_query(lambda c: c.data in urls.keys())
async def process_callback_button(callback_query: CallbackQuery):
    selected_url = urls[callback_query.data]
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="Cancel", callback_data="cancel"))
    keyboard.add(InlineKeyboardButton(text="OK", callback_data="ok"))
    keyboard.add(InlineKeyboardButton(text="Go to hot news", callback_data="get_news"))
    await callback_query.message.answer(f'Открыть эту ссылку: {selected_url}?', reply_markup=keyboard.as_markup())

@dp.callback_query(lambda c: c.data == 'cancel')
async def process_callback_cancel(callback_query: CallbackQuery):
    await callback_query.message.answer('Вы нажали Cancel')

@dp.callback_query(lambda c: c.data == 'ok')
async def process_callback_ok(callback_query: CallbackQuery):
    await callback_query.message.answer('Вы нажали OK')

def get_news():
    url = 'https://newsapi.org/v2/top-headlines?'
    params = {
        'country': 'us',
        'apiKey':API_KEY_NEWS,
        'category': 'general',  # Попробуйте добавить категорию
        'pageSize': 5  # Ограничим количество возвращаемых новостей
    }
    response = requests.get(url, params=params)
    print(f"Response status code: {response.status_code}")  # Отладка статуса ответа
    if response.status_code != 200:
        print(f"Error: {response.text}")  # Отладка текста ошибки
        return ["Не удалось получить новости."]

    data = response.json()
    print(f"Response data: {data}")  # Отладка данных ответа
    news = []
    for article in data['articles']:
        news.append(f"{article['title']}\n{article['url']}")
    print(f"Collected news: {news}")  # Отладка собранных новостей
    return news


@db.callback_query(lambda c: c.data == 'get_news')
async def process_callback_button(callback_query: types.CallbackQuery):
    await callback_query.answer()
    news = get_news()
    for item in news:
        print(f"Sending news item: {item}")  # Отладка отправляемого сообщения
        await bot.send_message(callback_query.from_user.id, item)



"""@dp.callback_query(lambda c: c.data == 'get_news')
async def process_callback_go_to_api(callback_query: CallbackQuery):
    async with aiohttp.ClientSession() as session:
        async with session.get(API_LINK) as response:  # Обратите внимание, что заголовок авторизации не нужен для этого URL
            if response.status == 200:
                await callback_query.message.answer('Вызов API выполнен успешно')
            else:
                await callback_query.message.answer(f'Ошибка при вызове API: {response.status}')
"""
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
